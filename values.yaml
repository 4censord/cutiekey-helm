# Default values for sharkey.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


sharkey:
  configMap: |
    id: "aidx"
    url: "https://sk.foopool.de"
    port: 3000
    maxNoteLength: 5000
    customMOTD: [
      'To the glory of jank',
      'May i present you some kubernetes',
      'Coming to you live from the kubernetes supercluster'
      'Happy helming'
    ]
  extraEnv: {}
  database:
    primary:
      existingSecret: "pg-sharkey-app"
      existingSecretHostKey: "host"
      existingSecretPortKey: "port"
      existingSecretUserKey: "user"
      existingSecretDatabaseKey: "dbname"
      existingSecretPasswordKey: "password"
  redis:
    existingSecret: "pg-sharkey-app"
    existingSecretHostKey: "host"
    existingSecretPortKey: "port"

persistence:
  enabled: false
  accessMode: ReadWriteMany
  ## Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # -- PVC Storage Class
  storageClass: ""
  # -- PVC Storage Request
  size: 10Gi
  # -- Additional annotations for PVC
  annotations: {}

replicaCount: 1

image:
  repository: registry.activitypub.software/transfem-org/sharkey
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "2024.6.0-dev-amd64"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  runAsGroup: 991
  runAsNonRoot: true
  runAsUser: 991
  seccompProfile: {type: "RuntimeDefault"}
  seLinuxOptions: null

securityContext:
  capabilities: {drop: ["ALL"]}
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  privileged: false

service:
  type: ClusterIP
  port: 3000

ingress:
  enabled: false
  className: "nginx"
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /healthz
    port: http
  initialDelaySeconds: 30
readinessProbe:
  httpGet:
    path: /healthz
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
extraVolumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
extraVolumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
